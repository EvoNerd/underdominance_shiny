w_add <- fitness_genotypes(sel_coef = 0.305, dom_coef = 0.12)
w_over <- fitness_genotypes(sel_coef = 0.305, dom_coef = 0.42)
w_under <- fitness_genotypes(sel_coef = 0.305, dom_coef = -0.21)
ss_add <- get_steady_state(w_add, get_p_byp(w_add))
ss_over <- get_steady_state(w_over, get_p_byp(w_over))
ss_under <- get_steady_state(w_under, get_p_byp(w_under))
ss_add
ss_over
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ss_add <- get_steady_state(w_add, get_p_byp(w_add))
ss_over <- get_steady_state(w_over, get_p_byp(w_over))
ss_under <- get_steady_state(w_under, get_p_byp(w_under))
ss_add
ss_over
ss_under
plot_p_byp(get_p_byp(w_add), ss_add)
plot_p_byp(get_p_byp(w_over), ss_over)
plot_p_byp(get_p_byp(w_under), ss_under)
runApp()
runApp()
?par
runApp('~/GitHub/SItreatment/app_draft')
runApp('~/GitHub/SItreatment/app_draft')
runApp()
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
plot_p_byp(get_p_byp(w_add), ss_add)
ss_add <- get_steady_state(w_add, get_p_byp(w_add))
ss_over <- get_steady_state(w_over, get_p_byp(w_over))
ss_under <- get_steady_state(w_under, get_p_byp(w_under))
plot_p_byp(get_p_byp(w_add), ss_add)
plot_p_byp(get_p_byp(w_over), ss_over)
plot_p_byp(get_p_byp(w_under), ss_under)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ss_add
ss_over
ss_under
ss_over
ss_add
runApp()
runApp()
ss_under
runApp()
runApp()
runApp()
runApp()
runApp()
sim_forward_time(1:10, p=0.1, w_add)
sim_forward_time(1:10, freq_init=0.1, w_add)
sim_forward_time(10, freq_init=0.1, w_add)
freq_init = 0.1
num_gens = 10
df <- data.frame(gens = 0:num_gens,
p = c(freq_init, rep(NA, num_gens)))
df
for(i in 2:nrow(df)){
W_bar <- mean_fitness(w_genotypes, df$p[i-1])
# use current mean fitness to get allele frequency in the next generation
df$p[i] <- next_p(w_genotypes["AA"], w_genotypes["Aa"], df$p[i-1], W_bar)
}
w_genotype = w_add
# loop through each generation
for(i in 2:nrow(df)){
W_bar <- mean_fitness(w_genotypes, df$p[i-1])
# use current mean fitness to get allele frequency in the next generation
df$p[i] <- next_p(w_genotypes["AA"], w_genotypes["Aa"], df$p[i-1], W_bar)
}
w_genotypes = w_add
# loop through each generation
for(i in 2:nrow(df)){
W_bar <- mean_fitness(w_genotypes, df$p[i-1])
# use current mean fitness to get allele frequency in the next generation
df$p[i] <- next_p(w_genotypes["AA"], w_genotypes["Aa"], df$p[i-1], W_bar)
}
df
df
rep(df, times = 3)
rep(df$gens, times = 3)
rep(df$gens, times = 3) %>% length()
?time
rep(c("AA", "hetero", "aa"), each = nrow(df))
rep(c("AA", "hetero", "aa"), each = nrow(df)) %>% length()
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
rm(df)
rm(freq_init)
rm(i)
rm(num_gens)
rm(w_genotype, w_genotypes)
rm(W_bar)
sim_add <- sim_forward_time(100, 0.1, w_add)
sim_add <- sim_forward_time(100, freq_init=0.1, w_add)
debug(sim_forward_time)
sim_add <- sim_forward_time(100, freq_init=0.1, w_add)
sim_add <- sim_forward_time(100, freq_init=0.1, w_add)
df_p
nrow(df)
2:nrow(df)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
sim_add <- sim_forward_time(100, freq_init=0.1, w_add)
sim_add$allele %>% head()
sim_add$allele %>% tail()
sim_add$genotypes %>% head()
sim_add$genotypes %>% tail()
sim_over <- sim_forward_time(100, freq_init=0.1, w_over)
sim_under <- sim_forward_time(100, freq_init=0.1, w_under)
sim_over
str(sim_over)
tmp <- sim_over$allele
max(tmp$gens)
seq(from = 0, to = 1, length.out = 5)
tmp
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_p_finite(tmp)
tmp$p
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_p_finite(tmp)
str(sim_add)
ss_add
ss_over
ss_under
tmp <- sim_under$allele
head(tmp)
tmp$p[1]
ss_under$unstable_pt
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_p_finiteANDoutcome(sim_add, ss_add)
ggplot_p_finiteANDoutcome(sim_over, ss_over)
ggplot_p_finiteANDoutcome(sim_under, ss_under)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_p_finiteANDoutcome(sim_under, ss_under)
runApp()
runApp()
runApp()
tmp <- sim_add$genotypes
sim_forward_time
head(tmp)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_genotype_finite(tmp)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
sim_add <- sim_forward_time(100, 0.1, w_add)
sim_under <- sim_forward_time(100, 0.1, w_under)
sim_over <- sim_forward_time(100, 0.1, w_over)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_genotype_finite(sim_add)
ggplot_genotype_finite(sim_add$genotypes)
ggplot_genotype_finite(sim_over$genotypes)
ggplot_genotype_finite(sim_under$genotypes)
fitness_genotypes()
fitness_genotypes
head(tmp)
ss_add$stable_pts
ss_over$stable_pts
data.frame(genotype = c("AA", "Aa", "aa"))
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_genotype_inf(sim_add$allele, ss_add)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_genotype_inf(sim_add$allele, ss_add)
ggplot_genotype_inf(sim_under$allele, ss_under)
ggplot_genotype_inf(sim_over$allele, ss_over)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
source("~/GitHub/underdominance_shiny/revised_app/underdom_funs.R", echo=TRUE)
ggplot_genotype_finiteANDoutcome(sim_add, ss_add)
ggplot_genotype_finiteANDoutcome(sim_over, ss_over)
ggplot_genotype_finiteANDoutcome(sim_under, ss_under)
runApp()
runApp()
runApp()
5400.55 * 6.5
5400.55 * 6.5 / 2
19960 - 17551.79
19960 - (5400.55 * 5.5)
19960 - (5400.55 * 5.5 / 2)
5400.55 * 0.6
5400.55 * 0.6 - 5400.55 * 0.5
5400.55 * 0.7 - 5400.55 * 0.5
40/60
5400.55 * 2/3 - 5400.55 * 0.5
5/6
5400.55 * 5/6
5108.487 - 5400.55 * 5/6
5108.487 - 5400.55 * 1/6
runApp()
runApp()
runApp()
runApp()
factor(sim_add$genotypes)
factor(sim_add$genotypes$genotyp)
tmp <- data.frame(genotype = c("AA", "aA", "aa"),
freq = c(ss_add$stable_pts^2,
2*ss_add$stable_pts*(1-ss_add$stable_pts),
(1-ss_add$stable_pts)^2))
tmp
factor(tmp$genotype)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(x = 0:1, y = rep(0,2))
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rep(1:5, times=3)
runApp()
sim_forward_time(num_gens = 10, freq_init = 0.1, fitness_genotypes(s=0.3, -0.7))
sim_forward_time(num_gens = 10, freq_init = 0.1, fitness_genotypes(s=0.3, -0.7))$genotypes
tmp <- sim_forward_time(num_gens = 10, freq_init = 0.1, fitness_genotypes(s=0.3, -0.7))$genotypes
tmp
tmp$freq[tmp$gens==0 & tmp$genotyp=="Aa"]
tmp$freq[tmp$gens==0 & tmp$genotyp=="Aa"]/2
runApp()
runApp()
runApp()
tmp <- sim_forward_time(num_gens = 10, freq_init = 0.1, fitness_genotypes(s=0.3, -0.7))$genotypes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
320/4 * 3
320/3 * 4
321/3 * 4
shiny::runApp()
runApp()
runApp()
?breakpoints
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/fire_niche_construction/ESEB_app')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?patchwork
??patchwork
?thematic_shiny
library(shiny)
?thematic_shiny
??thematic_shiny
library(thematic)
?font_spec
?uiOutput
runApp('~/GitHub/underdominance_shiny/app_server')
runApp('~/GitHub/underdominance_shiny/app_server')
shiny::runApp()
